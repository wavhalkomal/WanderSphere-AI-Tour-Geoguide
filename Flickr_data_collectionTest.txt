import pytest
from unittest.mock import MagicMock, patch
from Flickr_data_collection import Flicker_Data_Download  # Update with your actual module name

@pytest.fixture
def mock_flickr_data_download():
    return Flicker_Data_Download(display_text=MagicMock())

@pytest.fixture
def mock_flickr_api():
    with patch('Flickr_data_collection.flickrapi.FlickrAPI') as mock_flickr:
        yield mock_flickr

@pytest.fixture
def mock_textblob():
    with patch('Flickr_data_collection.TextBlob') as mock_blob:
        yield mock_blob

@pytest.fixture
def mock_workbook():
    with patch('Flickr_data_collection.openpyxl.Workbook') as mock_wb:
        yield mock_wb

def test_get_flickr_data_success(mock_flickr_data_download, mock_flickr_api, mock_textblob, mock_workbook):
    mock_flickr_instance = MagicMock()
    mock_flickr_api.return_value = mock_flickr_instance
    mock_flickr_instance.photos.search.return_value = {
        'photos': {'photo': [{'id': '1', 'farm': 1, 'server': 1, 'secret': 'abc', 'title': 'test'}]}
    }
    mock_flickr_instance.photos.getInfo.return_value = {
        'photo': {'tags': {'tag': [{'content': 'test'}]}, 'views': '100', 'comments': {'_content': '1'}}
    }
    mock_flickr_instance.photos.comments.getList.return_value = {
        'comments': {'comment': [{'authorname': 'test_user', '_content': 'test comment', 'permalink': 'url', 'datecreate': '12345'}]}
    }

    mock_textblob_instance = MagicMock()
    mock_textblob.return_value = mock_textblob_instance
    mock_textblob_instance.sentiment.polarity = 0.1

    mock_workbook_instance = MagicMock()
    mock_workbook.return_value = mock_workbook_instance

    result = mock_flickr_data_download.get_flickr_data(
        api_key='api_key', secret_api_key='secret', output_filepath='mock_file.xlsx', 
        lat=0.0, lon=0.0, pagecnt=1
    )

    mock_flickr_instance.photos.search.assert_called_once_with(lat=0.0, lon=0.0, accuracy=11, per_page=1)
    mock_flickr_instance.photos.getInfo.assert_called_once_with(photo_id='1')
    mock_flickr_instance.photos.comments.getList.assert_called_once_with(photo_id='1')

    assert result == 'Error Not Occured'

    mock_workbook_instance.save.assert_called_once_with('mock_file.xlsx')

def test_get_flickr_data_error(mock_flickr_data_download, mock_flickr_api, mock_textblob, mock_workbook):
    mock_flickr_instance = MagicMock()
    mock_flickr_api.return_value = mock_flickr_instance
    mock_flickr_instance.photos.search.side_effect = Exception('API error')

    result = mock_flickr_data_download.get_flickr_data(
        api_key='api_key', secret_api_key='secret', output_filepath='mock_file.xlsx', 
        lat=0.0, lon=0.0, pagecnt=1
    )

    assert result == 'Error Occured'

